DROP TABLE IF EXISTS trips;

CREATE TABLE trips (
    id INT PRIMARY KEY,
    driver_id INT,
    city VARCHAR(50),
    trip_distance FLOAT,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    rating INT
);


INSERT INTO trips (id, driver_id, city, trip_distance, start_time, end_time, rating) VALUES
(1, 101, 'Mumbai', 5.2, '2024-07-01 08:00:00', '2024-07-01 08:20:00', 4),
(2, 101, 'Mumbai', 3.0, '2024-07-01 09:00:00', '2024-07-01 09:15:00', 5),
(3, 102, 'Delhi', 7.1, '2024-07-01 10:00:00', '2024-07-01 10:30:00', 4),
(4, 102, 'Delhi', 2.5, '2024-07-01 11:00:00', '2024-07-01 11:12:00', 2), -- Rating is 3 or below, should be ignored
(5, 103, 'Bangalore', 4.8, '2024-07-01 12:00:00', '2024-07-01 12:25:00', 4),
(6, 103, 'Bangalore', 6.2, '2024-07-01 13:00:00', '2024-07-01 13:40:00', 5),
(7, 101, 'Mumbai', 8.0, '2024-07-02 14:00:00', '2024-07-02 14:30:00', 5),
(8, 102, 'Delhi', 5.5, '2024-07-02 15:00:00', '2024-07-02 15:25:00', 4),
(9, 103, 'Bangalore', 3.6, '2024-07-02 16:00:00', '2024-07-02 16:18:00', 3),
(10, 104, 'Chennai', 6.5, '2024-07-02 09:30:00', '2024-07-02 10:00:00', 4),
(11, 103, 'Hyderabad', 3.2, '2024-07-02 11:00:00', '2024-07-02 11:20:00', 5),
(12, 104, 'Chennai', 4.9, '2024-07-03 13:00:00', '2024-07-03 13:35:00', 4),
(13, 104, 'Kolkata', 7.8, '2024-07-03 15:30:00', '2024-07-03 16:10:00', 5),
(14, 103, 'Hyderabad', 2.7, '2024-07-03 17:00:00', '2024-07-03 17:18:00', 3),
(15, 104, 'Kolkata', 5.4, '2024-07-04 08:45:00', '2024-07-04 09:15:00', 4),
(16, 104, 'Chennai', 3.3, '2024-07-04 10:30:00', '2024-07-04 10:50:00', 5);

Select * from trips

--Write an SQL query to find the average trip duration for each driver 
--in each city excluding trips where the rating is below 3. 
--The result should include driver_id, city, and average_trip_duration rounded to two decimal places. 

Select driver_id, city,ROUND(AVG(EXTRACT(EPOCH FROM (end_time - start_time)/60)), 2) as avg_time_duration    
from trips
where rating>=3
group by driver_id, city

------------------------------------------------------------------------------------------------------------------

-- 1.1 Create `drivers` Table
DROP TABLE IF EXISTS drivers;
CREATE TABLE drivers (
    driver_id INT PRIMARY KEY,
    driver_name VARCHAR(100),
    driver_rating FLOAT,
    join_date DATE
);

-- 1.2 Create `passengers` Table

DROP TABLE IF EXISTS passenger;
CREATE TABLE passengers (
    passenger_id INT PRIMARY KEY,
    passenger_name VARCHAR(100),
    passenger_rating FLOAT,
    join_date DATE
);

-- 1.3 Create `rides` Table
DROP TABLE IF EXISTS rides;
CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT,
    passenger_id INT,
    ride_date DATE,
    ride_distance FLOAT,
    ride_cost FLOAT,
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id),
    FOREIGN KEY (passenger_id) REFERENCES passengers(passenger_id)
);

-- Step 2: Insert Data

-- 2.1 Insert into `drivers` Table
INSERT INTO drivers (driver_id, driver_name, driver_rating, join_date) VALUES
(1, 'John Doe', 4.8, '2022-01-15'),
(2, 'Jane Smith', 4.5, '2021-07-22'),
(3, 'Bob Johnson', 4.9, '2020-11-30');

-- 2.2 Insert into `passengers` Table
INSERT INTO passengers (passenger_id, passenger_name, passenger_rating, join_date) VALUES
(1, 'Alice Brown', 4.7, '2022-03-11'),
(2, 'Charlie Green', 4.6, '2021-09-19'),
(3, 'David White', 4.8, '2020-05-25');

-- 2.3 Insert into `rides` Table
INSERT INTO rides (ride_id, driver_id, passenger_id, ride_date, ride_distance, ride_cost) VALUES
(1, 1, 1, '2023-06-01', 12.5, 25.0),
(2, 2, 2, '2023-06-02', 8.0, 16.0),
(3, 3, 3, '2023-06-03', 10.2, 20.4),
(4, 1, 2, '2023-06-04', 7.5, 15.0),
(5, 2, 3, '2023-06-05', 15.0, 30.0),
(6, 2, 3, '2023-06-07', 15.0, 30.0);


SELECT * FROM passengers;
SELECT * FROM drivers;
SELECT * FROM rides;

-- Question 1: Find the driver with the highest Rating (return driver_name and rating)

Select driver_name, driver_rating
from drivers 
order by driver_rating desc
limit 1

-- Question 2: Calculate the Total Revenue Generated by Each Driver (return driver_name, id, revenue)

Select d.driver_name, d.driver_id , sum(r.ride_cost)
from drivers d 
join rides r on d.driver_id = r.driver_id
group by  d.driver_name, d.driver_id

-- Question 3: Find the Passenger with the Highest Number of Rides (return passenger_name, id, no of rides)

--Approach 1
Select p.passenger_name, p.passenger_id, count(r.passenger_id)
from passengers p
join rides r on p.passenger_id = r.passenger_id
group by  p.passenger_name, p.passenger_id
order by count(r.passenger_id) desc
limit 1

--Approach 2(we use this approach when there are more than 1 cx with same count of rides )

With cte as (
	Select p.passenger_id, p.passenger_name, Count(r.*) as no_of_rides,
	Rank() over(order by Count(r.*) desc) as rnk
	from passengers p 
	join rides r on p.passenger_id = r.passenger_id
	group by p.passenger_id,r.passenger_id
	order by Count(r.*) desc
)

Select passenger_id, passenger_name,no_of_rides
from cte
where rnk = 1

-- Question 4: Identify the Most Frequent Ride Distance (return ride_distance and number of frequency)

SELECT * FROM passengers;
SELECT * FROM drivers;
SELECT * FROM rides;

with cte as(
	Select ride_distance, count(ride_distance) as frequency,
	rank() over(order by count(ride_distance) desc ) as rnk
	from rides
	group by ride_distance
	order by count(ride_distance)
)

select ride_distance, frequency
from cte
where rnk = 1
------------------------------------------------------------------------------------------------------




DROP TABLE IF EXISTS cities;
DROP TABLE IF EXISTS restaurants;
DROP TABLE IF EXISTS orders;

-- Create cities table
CREATE TABLE cities (
    city_id SERIAL PRIMARY KEY,
    city_name VARCHAR(50)
);

-- Create restaurants table
CREATE TABLE restaurants (
    restaurant_id SERIAL PRIMARY KEY,
    restaurant_name VARCHAR(100),
    city_id INT,
    FOREIGN KEY (city_id) REFERENCES cities(city_id)
);

-- Create orders table with rating column
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    restaurant_id INT,
    order_value DECIMAL(10, 2),
    order_date DATE,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    FOREIGN KEY (restaurant_id) REFERENCES restaurants(restaurant_id)
);

-- Insert data into cities table
INSERT INTO cities (city_name) VALUES
('Mumbai'),
('Delhi'),
('Bengaluru');

-- Insert data into restaurants table
INSERT INTO restaurants (restaurant_name, city_id) VALUES
('Bademiya', 1),
('Bombay Canteen', 1),
('Trishna', 1),
('Karims', 2),
('Indian Accent', 2),
('Bukhara', 2),
('Toit', 3),
('Koshys', 3),
('MTR', 3);

-- Insert data into orders table with rating
INSERT INTO orders (restaurant_id, order_value, order_date, rating) VALUES
(1, 500.00, '2024-01-01', 4),
(1, 450.00, '2024-01-02', 5),
(1, 550.00, '2024-01-03', 4),
(2, 300.00, '2024-01-01', 3),
(2, 350.00, '2024-01-02', 4),
(2, 250.00, '2024-01-03', 3),
(3, 700.00, '2024-01-01', 5),
(3, 750.00, '2024-01-02', 4),
(3, 800.00, '2024-01-03', 5),
(4, 400.00, '2024-01-01', 4),
(4, 500.00, '2024-01-02', 5),
(4, 450.00, '2024-01-03', 4),
(5, 600.00, '2024-01-01', 5),
(5, 550.00, '2024-01-02', 4),
(5, 650.00, '2024-01-03', 5),
(6, 900.00, '2024-01-01', 5),
(6, 850.00, '2024-01-02', 5),
(6, 950.00, '2024-01-03', 4),
(7, 400.00, '2024-01-01', 3),
(7, 450.00, '2024-01-02', 4),
(7, 500.00, '2024-01-03', 3),
(8, 1000.00, '2024-01-01', 5),
(8, 1050.00, '2024-01-02', 4),
(8, 1100.00, '2024-01-03', 5),
(9, 800.00, '2024-01-01', 5),
(9, 850.00, '2024-01-02', 4),
(9, 900.00, '2024-01-03', 5);

SELECT * FROM cities;
SELECT * FROM restaurants;
SELECT * FROM orders;

-- -- Interview Question

-- Write a SQL query to find the top 2 restaurants in each city with the highest average rating. 
-- return city_id, city_name, restaurant_id, restaurant_name and avg_rating

with cte as (
	Select c.city_id, c.city_name, o.restaurant_id, r.restaurant_name, avg(o.rating) as avg_rating,
    dense_rank() over(order by avg(o.rating) desc) as rnk
    from orders o 
    join restaurants r on o.restaurant_id = r.restaurant_id
    join cities c on r.city_id = c.city_id
    group by  c.city_id, c.city_name, o.restaurant_id,r.restaurant_name
    order by avg(o.rating) desc
)

select city_id, city_name, restaurant_id, restaurant_name,avg_rating
from cte 
where rnk =1





















































































































